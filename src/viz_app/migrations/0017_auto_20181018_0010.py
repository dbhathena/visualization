# Generated by Django 2.0.6 on 2018-10-18 04:10

import datetime
import json
import os

from django.db import migrations
from django.utils import timezone
from dateutil import tz

# Returns a list of the files, ignoring '.files', in the given directory
# Directory is a string of the path to the directory
def get_files(directory):
    files = os.listdir(directory)
    return [x for x in files if not (x.startswith('.'))]


def populate_eda_data(apps, schema_editor):
    directory = 'data/E4/EDA'
    files = get_files(directory)
    PhysData = apps.get_model('viz_app', 'PhysData')
    for edaFile in files:
        filenameElements = edaFile.split('_')
        participant = filenameElements[0]
        frequency = str(filenameElements[2][:-5])
        if frequency != '1hr' and frequency != '24hrs':
            continue
        data = json.load(open(directory + '/' + edaFile, 'r'))
        for dateString in data["ID"]:
            naive_date = datetime.datetime.fromtimestamp(int(dateString)/1000)
            date = timezone.make_aware(naive_date, tz.gettz('America/New_York'))

            eda_mean_difference = data.get("eda_motionless_"+frequency+"_mean_difference_r_l")
            eda_mean_left = data.get("eda_motionless_"+frequency+"_mean_left")
            eda_mean_right = data.get("eda_motionless_"+frequency+"_mean_right")
            scrs_left = data.get("eda_motionless_"+frequency+"_scrs_left")
            scrs_right = data.get("eda_motionless_"+frequency+"_scrs_right")
            eda_mean_difference = eda_mean_difference[dateString] if eda_mean_difference else None
            eda_mean_left = eda_mean_left[dateString] if eda_mean_left else None
            eda_mean_right = eda_mean_right[dateString] if eda_mean_right else None
            scrs_left = scrs_left[dateString] if scrs_left else None
            scrs_right = scrs_right[dateString] if scrs_right else None

            line1 = PhysData(date=date,
                             category='EDA Mean Difference',
                             interval=frequency,
                             name=participant,
                             measurement=eda_mean_difference,
                             group="Physiology")
            line2 = PhysData(date=date,
                             category='EDA Mean',
                             interval=frequency,
                             name=participant,
                             measurement=eda_mean_left,
                             hand='left',
                             group="Physiology")
            line3 = PhysData(date=date,
                             category='EDA Mean',
                             interval=frequency,
                             name=participant,
                             measurement=eda_mean_right,
                             hand='right',
                             group="Physiology")
            line4 = PhysData(date=date,
                             category='Skin Conductance Response',
                             interval=frequency,
                             name=participant,
                             measurement=scrs_left,
                             hand='left',
                             group="Physiology")
            line5 = PhysData(date=date,
                             category='Skin Conductance Response',
                             interval=frequency,
                             name=participant,
                             measurement=scrs_right,
                             hand='right',
                             group="Physiology")
            line1.save()
            line2.save()
            line3.save()
            line4.save()
            line5.save()


class Migration(migrations.Migration):

    dependencies = [
        ('viz_app', '0016_physdata_group'),
    ]

    operations = [
        migrations.RunPython(populate_eda_data)
    ]

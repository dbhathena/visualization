# Generated by Django 2.0.6 on 2018-10-19 00:22

import datetime
import json
import os

from django.db import migrations
from django.utils import timezone
from dateutil import tz

DATE_FORMAT = '%Y-%m-%d %H'
MEASUREMENT_TYPE_SUFFIXES = {
    '_Incoming_count_call': "Incoming Call Count",
    '_Outgoing_count_call': "Outgoing Call Count",
    '_Incoming_mean_call_duration': "Incoming Call Mean Duration",
    '_Outgoing_mean_call_duration': "Outgoing Call Mean Duration",
    '_Incoming_median_call_duration': "Incoming Call Median Duration",
    '_Outgoing_median_call_duration': "Outgoing Call Median Duration",
    '_Incoming_std_call_duration': "Incoming Call Std Duration",
    '_Outgoing_std_call_duration': "Outgoing Call Std Duration",
    '_Incoming_sum_call_duration': "Incoming Call Sum Duration",
    '_Outgoing_sum_call_duration': "Outgoing Call Sum Duration",
}



# Returns a list of the files, ignoring '.files', in the given directory
# Directory is a string of the path to the directory
def get_files(directory):
    files = os.listdir(directory)
    return [x for x in files if not (x.startswith('.'))]


def populate_phone_call_data(apps, schema_editor):
    directory = 'data/Phone/phone_usage/calls'
    files = get_files(directory)
    PhysData = apps.get_model('viz_app', 'PhysData')
    for callFile in files:
        filenameElements = callFile.split('_')
        participant = filenameElements[2][:-5]
        data = json.load(open(directory + '/' + callFile, 'r'))
        for day_data in data:
            for measurement_key in MEASUREMENT_TYPE_SUFFIXES:
                category = MEASUREMENT_TYPE_SUFFIXES[measurement_key]
                for hour in range(24):
                    hour_id_string = str(hour) + '_to_' + str((hour+1)%24)
                    date_string = day_data["date"] + " 0" + str(hour) if hour <= 9 else day_data["date"] + " " + str(hour)
                    naive_date = datetime.datetime.strptime(date_string, DATE_FORMAT)
                    date = timezone.make_aware(naive_date, tz.gettz('America/New_York'))

                    final_key = hour_id_string+measurement_key
                    measurement = day_data[final_key] if final_key in day_data else 0
                    frequency = '1hr'
                    group = "Phone Usage"
                    line = PhysData(name=participant,
                                    date=date,
                                    category=category,
                                    measurement=measurement,
                                    interval=frequency,
                                    group=group)
                    line.save()

                daily_key = 'daily' + measurement_key
                date_string = day_data["date"] + " 00"
                naive_date = datetime.datetime.strptime(date_string, DATE_FORMAT)
                date = timezone.make_aware(naive_date, tz.gettz('America/New_York'))

                measurement = day_data[daily_key]
                frequency = '24hrs'
                group = "Phone Usage"
                line = PhysData(name=participant,
                                date=date,
                                category=category,
                                measurement=measurement,
                                interval=frequency,
                                group=group)
                line.save()

class Migration(migrations.Migration):

    dependencies = [
        ('viz_app', '0017_auto_20181018_0010'),
    ]

    operations = [
        migrations.RunPython(populate_phone_call_data)
    ]

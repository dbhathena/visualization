# Generated by Django 2.0.6 on 2018-12-11 23:32

import datetime
import json
import os

from django.db import migrations
from django.utils import timezone
from dateutil import tz

DATE_FORMAT = '%Y-%m-%d %H'
MEASUREMENT_TYPE_SUFFIXES_CALL = {
    '_Incoming_count_call': "Incoming Call Count",
    '_Outgoing_count_call': "Outgoing Call Count",
    '_Incoming_mean_call_duration': "Incoming Call Mean Duration",
    '_Outgoing_mean_call_duration': "Outgoing Call Mean Duration",
    '_Incoming_median_call_duration': "Incoming Call Median Duration",
    '_Outgoing_median_call_duration': "Outgoing Call Median Duration",
    '_Incoming_std_call_duration': "Incoming Call Std Duration",
    '_Outgoing_std_call_duration': "Outgoing Call Std Duration",
    '_Incoming_sum_call_duration': "Incoming Call Sum Duration",
    '_Outgoing_sum_call_duration': "Outgoing Call Sum Duration",
}
MEASUREMENT_TYPE_SUFFIXES_DISPLAY = {
    '_sum_on_duration': "Screen On Sum Duration",
    '_std_on_duration': "Screen On Std Duration",
    '_mean_on_duration': "Screen On Mean Duration",
    '_median_on_duration': "Screen On Median Duration",
    '_count_on': "Screen On Count"
}
MEASUREMENT_TYPE_SUFFIXES_SMS = {
    '_Incoming_count_sms': "Incoming SMS Count",
    '_Incoming_mean_sms_length': "Incoming SMS Mean Length",
    '_Incoming_median_sms_length': "Incoming SMS Median Length",
    '_Incoming_std_sms_length': "Incoming SMS Std Length",
    '_Incoming_sum_sms_length': "Incoming SMS Sum Length",
    '_Outgoing_count_sms': "Outgoing SMS Count",
    '_Outgoing_mean_sms_length': "Outgoing SMS Mean Length",
    '_Outgoing_median_sms_length': "Outgoing SMS Median Length",
    '_Outgoing_std_sms_length': "Outgoing SMS Std Length",
    '_Outgoing_sum_sms_length': "Outgoing SMS Sum Length"
}
MEASUREMENT_TYPE_SUFFIXES_LOCATION = {
    '_lat_std': "Latitude Std",
    '_long_std': "Longitude Std",
    '_avg_std': "Average Location Std",
    '_home_stay': "Home Stay",
    '_stationary_avg_std': "Average Stationary Std",
    '_stationary_lat_std': "Latitude Stationary Std",
    '_stationary_long_std': "Longitude Stationary Std",
    '_total_distance': "Total Distance",
    '_transition_time': "Transition Time"
}


# Returns a list of the files, ignoring '.files', in the given directory
# Directory is a string of the path to the directory
def get_files(directory):
    files = os.listdir(directory)
    return [x for x in files if not (x.startswith('.'))]


def populate_call_data(apps, schema_editor):
    # directory = '../../../../../opt/data/Phone/phone_usage/calls'
    directory = '../../data/Phone/phone_usage/calls'
    files = get_files(directory)
    PhoneData = apps.get_model('viz_app', 'PhoneData')
    for callFile in files:
        filenameElements = callFile.split('_')
        participant = filenameElements[2][:-5]
        data = json.load(open(directory + '/' + callFile, 'r'))
        for day_data in data:
            for measurement_key in MEASUREMENT_TYPE_SUFFIXES_CALL:
                category = MEASUREMENT_TYPE_SUFFIXES_CALL[measurement_key]
                for hour in range(24):
                    hour_id_string = str(hour) + '_to_' + str((hour+1))
                    date_string = day_data["date"] + " 0" + str(hour) if hour <= 9 else day_data["date"] + " " + str(hour)
                    naive_date = datetime.datetime.strptime(date_string, DATE_FORMAT)
                    date = timezone.make_aware(naive_date, tz.gettz('America/New_York'))

                    final_key = hour_id_string+measurement_key
                    measurement = day_data[final_key]
                    frequency = '1hr'
                    group = "Phone_Usage"
                    line = PhoneData(name=participant,
                                    date=date,
                                    category=category,
                                    interval=frequency,
                                    measurement=measurement,
                                    group=group)
                    line.save()

                daily_key = 'daily' + measurement_key
                date_string = day_data["date"] + " 00"
                naive_date = datetime.datetime.strptime(date_string, DATE_FORMAT)
                date = timezone.make_aware(naive_date, tz.gettz('America/New_York'))

                measurement = day_data[daily_key]
                frequency = '24hrs'
                group = "Phone_Usage"
                line = PhoneData(name=participant,
                                date=date,
                                category=category,
                                interval=frequency,
                                measurement=measurement,
                                group=group)
                line.save()


def populate_display_data(apps, schema_editor):
    # directory = '../../../../../opt/data/Phone/phone_usage/display'
    directory = '../../data/Phone/phone_usage/display'
    files = get_files(directory)
    PhoneData = apps.get_model('viz_app', 'PhoneData')
    for displayFile in files:
        filenameElements = displayFile.split('_')
        participant = filenameElements[2][:-5]
        data = json.load(open(directory + '/' + displayFile, 'r'))
        for day_data in data:
            for measurement_key in MEASUREMENT_TYPE_SUFFIXES_DISPLAY:
                category = MEASUREMENT_TYPE_SUFFIXES_DISPLAY[measurement_key]
                for hour in range(24):
                    hour_id_string = str(hour) + '_to_' + str((hour+1))
                    date_string = day_data["date"] + " 0" + str(hour) if hour <= 9 else day_data["date"] + " " + str(hour)
                    naive_date = datetime.datetime.strptime(date_string, DATE_FORMAT)
                    date = timezone.make_aware(naive_date, tz.gettz('America/New_York'))

                    final_key = hour_id_string+measurement_key
                    measurement = day_data[final_key]
                    frequency = '1hr'
                    group = "Phone_Usage"
                    line = PhoneData(name=participant,
                                    date=date,
                                    category=category,
                                    measurement=measurement,
                                    interval=frequency,
                                    group=group)
                    line.save()

                daily_key = 'daily' + measurement_key
                date_string = day_data["date"] + " 00"
                naive_date = datetime.datetime.strptime(date_string, DATE_FORMAT)
                date = timezone.make_aware(naive_date, tz.gettz('America/New_York'))

                measurement = day_data[daily_key]
                frequency = '24hrs'
                group = "Phone_Usage"
                line = PhoneData(name=participant,
                                date=date,
                                category=category,
                                measurement=measurement,
                                interval=frequency,
                                group=group)
                line.save()


def populate_sms_data(apps, schema_editor):
    # directory = '../../../../../opt/data/Phone/phone_usage/sms'
    directory = '../../data/Phone/phone_usage/sms'
    files = get_files(directory)
    PhoneData = apps.get_model('viz_app', 'PhoneData')
    for smsFile in files:
        filenameElements = smsFile.split('_')
        participant = filenameElements[2][:-5]
        data = json.load(open(directory + '/' + smsFile, 'r'))
        for day_data in data:
            for measurement_key in MEASUREMENT_TYPE_SUFFIXES_SMS:
                category = MEASUREMENT_TYPE_SUFFIXES_SMS[measurement_key]
                for hour in range(24):
                    hour_id_string = str(hour) + '_to_' + str((hour+1))
                    date_string = day_data["date"] + " 0" + str(hour) if hour <= 9 else day_data["date"] + " " + str(hour)
                    naive_date = datetime.datetime.strptime(date_string, DATE_FORMAT)
                    date = timezone.make_aware(naive_date, tz.gettz('America/New_York'))

                    final_key = hour_id_string+measurement_key
                    measurement = day_data[final_key]
                    frequency = '1hr'
                    group = "Phone_Usage"
                    line = PhoneData(name=participant,
                                    date=date,
                                    category=category,
                                    measurement=measurement,
                                    interval=frequency,
                                    group=group)
                    line.save()

                daily_key = 'daily' + measurement_key
                date_string = day_data["date"] + " 00"
                naive_date = datetime.datetime.strptime(date_string, DATE_FORMAT)
                date = timezone.make_aware(naive_date, tz.gettz('America/New_York'))

                measurement = day_data[daily_key]
                frequency = '24hrs'
                group = "Phone_Usage"
                line = PhoneData(name=participant,
                                date=date,
                                category=category,
                                measurement=measurement,
                                interval=frequency,
                                group=group)
                line.save()


def populate_location_data(apps, schema_editor):
    # directory = '../../../../../opt/data/Phone/phone_usage/location'
    directory = '../../data/Phone/phone_usage/location'
    files = get_files(directory)
    PhoneData = apps.get_model('viz_app', 'PhoneData')
    for locationFile in files:
        filenameElements = locationFile.split('_')
        participant = filenameElements[1][:-5]
        data = json.load(open(directory + '/' + locationFile, 'r'))
        for day_data in data:
            for measurement_key in MEASUREMENT_TYPE_SUFFIXES_LOCATION:
                category = MEASUREMENT_TYPE_SUFFIXES_LOCATION[measurement_key]
                for hour in range(24):
                    hour_id_string = str(hour) + '_to_' + str((hour+1))
                    date_string = day_data["date"] + " 0" + str(hour) if hour <= 9 else day_data["date"] + " " + str(hour)
                    naive_date = datetime.datetime.strptime(date_string, DATE_FORMAT)
                    date = timezone.make_aware(naive_date, tz.gettz('America/New_York'))

                    final_key = hour_id_string+measurement_key
                    measurement = day_data[final_key]
                    frequency = '1hr'
                    group = "Phone_Usage"
                    line = PhoneData(name=participant,
                                    date=date,
                                    category=category,
                                    measurement=measurement,
                                    interval=frequency,
                                    group=group)
                    line.save()

                daily_key = 'daily' + measurement_key
                date_string = day_data["date"] + " 00"
                naive_date = datetime.datetime.strptime(date_string, DATE_FORMAT)
                date = timezone.make_aware(naive_date, tz.gettz('America/New_York'))

                measurement = day_data[daily_key]
                frequency = '24hrs'
                group = "Phone_Usage"
                line = PhoneData(name=participant,
                                date=date,
                                category=category,
                                measurement=measurement,
                                interval=frequency,
                                group=group)
                line.save()


class Migration(migrations.Migration):

    dependencies = [
        ('viz_app', '0026_phonedata'),
    ]

    operations = [
        migrations.RunPython(populate_call_data),
        migrations.RunPython(populate_display_data),
        migrations.RunPython(populate_sms_data),
        migrations.RunPython(populate_location_data)
    ]

# Generated by Django 2.0.6 on 2019-02-21 00:45

import datetime
import json
import os

from django.db import migrations, models
from django.utils import timezone
from dateutil import tz
from ..value_mappings import *


# Returns a list of the files, ignoring '.files', in the given directory
# Directory is a string of the path to the directory
def get_files(directory):
    files = os.listdir(directory)
    return [x for x in files if not (x.startswith('.'))]


def populate_dep_data_daily(apps, schema_editor):
    directory = 'data/E4/STUDY2_DEPDAILY'
    files = get_files(directory)
    DepData = apps.get_model('viz_app', 'DepData')
    bounds = MEASUREMENT_THRESHOLDS["Daily (PHQ-9)"]
    for depFile in files:
        filenameElements = depFile.split('_')
        participant = filenameElements[0]
        frequency = "daily"
        data = json.load(open(directory + '/' + depFile, 'r'))
        for dateString in data["depression_scales_daily"]:
            naive_date = datetime.datetime.fromtimestamp(int(dateString) / 1000)
            date = timezone.make_aware(naive_date, tz.gettz('America/New_York'))
            depScale = data["depression_scales_daily"][dateString]
            line = DepData(date=date,
                            category="Daily (PHQ-9)",
                            name=participant,
                            interval=frequency,
                            measurement=depScale)
            line.save()


def reverse_populate_daily_dep_data(apps, schema_editor):
    directory = 'data/E4/STUDY2_DEPDAILY'
    files = get_files(directory)
    DepData = apps.get_model('viz_app', 'DepData')
    for f in files:
        filenameElements = f.split('_')
        participant = filenameElements[0]
        frequency = filenameElements[3][:-5]
        DepData.objects.filter(name=participant, category="Daily (PHQ-9)", interval=frequency).delete()


def populate_dep_data_weekly(apps, schema_editor):
    directory = 'data/E4/STUDY2_DEPWEEKLY'
    files = get_files(directory)
    DepData = apps.get_model('viz_app', 'DepData')
    bounds = MEASUREMENT_THRESHOLDS["Weekly (HDRS)"]
    for depFile in files:
        filenameElements = depFile.split('_')
        participant = filenameElements[0]
        frequency = "weekly"
        data = json.load(open(directory + '/' + depFile, 'r'))
        for dateString in data["depression_scales_weekly"]:
            naive_date = datetime.datetime.fromtimestamp(int(dateString) / 1000)
            date = timezone.make_aware(naive_date, tz.gettz('America/New_York'))
            depFrac = data["depression_scales_weekly"][dateString]
            line = DepData(date=date,
                            category="Weekly (HDRS)",
                            name=participant,
                            interval=frequency,
                            measurement=depFrac)
            line.save()

def reverse_populate_weekly_dep_data(apps, schema_editor):
    directory = 'data/E4/STUDY2_DEPWEEKLY'
    files = get_files(directory)
    DepData = apps.get_model('viz_app', 'DepData')
    for f in files:
        filenameElements = f.split('_')
        participant = filenameElements[0]
        frequency = filenameElements[3][:-5]
        DepData.objects.filter(name=participant, category="Weekly (HDRS)", interval=frequency).delete()

class Migration(migrations.Migration):

    dependencies = [
        ('viz_app', '0053_depdata'),
    ]

    operations = [
        migrations.RunPython(populate_dep_data_daily, reverse_populate_daily_dep_data),
        migrations.RunPython(populate_dep_data_weekly, reverse_populate_weekly_dep_data),
    ]
